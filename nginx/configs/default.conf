upstream backend {
  server backend:3001;
}

upstream client {
  server client:3000;
}

server {
  # "deferred" reduces the number of formalities between the server and client.
  # listen 80 default deferred;
  listen 80;
  #server_name PLACEHOLDER_VHOST;

  # https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#taxing-rewrites
  #return 301 http://$host$request_uri;

  # Ensure timeouts are equal across browsers.
  keepalive_timeout 60;

  # Force SSL connections on agents (browsers) who support this header.
  # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;";

  # Load the back end with proper headers.
  # This is the reverse proxy block
  # Any traffic at this point will be sent to the nodejs api
  # We set some proxy headers to make sure the nodejs app
  # has the correct IP address of the user and that the request is 
  # forward by a proxy (in this case nginx).
  # The location name matches up with the upstream name at the top of the file.
  # This lets nginx know which backend to forward the request to.
  location /backend {
    rewrite /backend/(.*) /$1 break;

    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_redirect off;

    #if ($http_x_forwarded_proto = "http") {
    #  return 301 https://$host$request_uri;
    #}

    proxy_pass http://backend;
  }

  location / {
    proxy_pass http://client;
  }
}